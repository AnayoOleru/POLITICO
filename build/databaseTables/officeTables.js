'use strict';

var _require = require('pg'),
    Pool = _require.Pool;

var dotenv = require('dotenv');

dotenv.config();

var pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

pool.on('connect', function () {
  console.log('database is connected now');
});

/**
 * Create user Tables
 */
var createOfficeTables = function createOfficeTables() {
  var queryText = 'CREATE TABLE IF NOT EXISTS\n      office(\n        id UUID PRIMARY KEY NOT NULL,\n        name VARCHAR(128) NOT NULL,\n        type VARCHAR(128) NOT NULL,\n        created_date TIMESTAMP\n      )';

  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

/**
 * Drop Tables
 */
var dropOfficeTables = function dropOfficeTables() {
  var queryText = 'DROP TABLE IF EXISTS office';
  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

pool.on('remove', function () {
  console.log('Table rcreation exited');
  process.exit(0);
});

module.exports = {
  createOfficeTables: createOfficeTables,
  dropOfficeTables: dropOfficeTables
};

require('make-runnable');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlVGFibGVzL29mZmljZVRhYmxlcy5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiUG9vbCIsImRvdGVudiIsImNvbmZpZyIsInBvb2wiLCJjb25uZWN0aW9uU3RyaW5nIiwicHJvY2VzcyIsImVudiIsIkRBVEFCQVNFX1VSTCIsIm9uIiwiY29uc29sZSIsImxvZyIsImNyZWF0ZU9mZmljZVRhYmxlcyIsInF1ZXJ5VGV4dCIsInF1ZXJ5IiwidGhlbiIsInJlcyIsImVuZCIsImNhdGNoIiwiZXJyIiwiZHJvcE9mZmljZVRhYmxlcyIsImV4aXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztlQUFpQkEsUUFBUSxJQUFSLEM7SUFBVEMsSSxZQUFBQSxJOztBQUNSLElBQU1DLFNBQVNGLFFBQVEsUUFBUixDQUFmOztBQUVBRSxPQUFPQyxNQUFQOztBQUVBLElBQU1DLE9BQU8sSUFBSUgsSUFBSixDQUFTO0FBQ3BCSSxvQkFBa0JDLFFBQVFDLEdBQVIsQ0FBWUM7QUFEVixDQUFULENBQWI7O0FBSUFKLEtBQUtLLEVBQUwsQ0FBUSxTQUFSLEVBQW1CLFlBQU07QUFDdkJDLFVBQVFDLEdBQVIsQ0FBWSwyQkFBWjtBQUNELENBRkQ7O0FBSUE7OztBQUdBLElBQU1DLHFCQUFxQixTQUFyQkEsa0JBQXFCLEdBQU07QUFDL0IsTUFBTUMsaU5BQU47O0FBU0FULE9BQUtVLEtBQUwsQ0FBV0QsU0FBWCxFQUNHRSxJQURILENBQ1EsVUFBQ0MsR0FBRCxFQUFTO0FBQ2JOLFlBQVFDLEdBQVIsQ0FBWUssR0FBWjtBQUNBWixTQUFLYSxHQUFMO0FBQ0QsR0FKSCxFQUtHQyxLQUxILENBS1MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2RULFlBQVFDLEdBQVIsQ0FBWVEsR0FBWjtBQUNBZixTQUFLYSxHQUFMO0FBQ0QsR0FSSDtBQVNELENBbkJEOztBQXFCQTs7O0FBR0EsSUFBTUcsbUJBQW1CLFNBQW5CQSxnQkFBbUIsR0FBTTtBQUM3QixNQUFNUCxZQUFZLDZCQUFsQjtBQUNBVCxPQUFLVSxLQUFMLENBQVdELFNBQVgsRUFDR0UsSUFESCxDQUNRLFVBQUNDLEdBQUQsRUFBUztBQUNiTixZQUFRQyxHQUFSLENBQVlLLEdBQVo7QUFDQVosU0FBS2EsR0FBTDtBQUNELEdBSkgsRUFLR0MsS0FMSCxDQUtTLFVBQUNDLEdBQUQsRUFBUztBQUNkVCxZQUFRQyxHQUFSLENBQVlRLEdBQVo7QUFDQWYsU0FBS2EsR0FBTDtBQUNELEdBUkg7QUFTRCxDQVhEOztBQWFBYixLQUFLSyxFQUFMLENBQVEsUUFBUixFQUFrQixZQUFNO0FBQ3RCQyxVQUFRQyxHQUFSLENBQVksd0JBQVo7QUFDQUwsVUFBUWUsSUFBUixDQUFhLENBQWI7QUFDRCxDQUhEOztBQUtBQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZYLHdDQURlO0FBRWZRO0FBRmUsQ0FBakI7O0FBS0FwQixRQUFRLGVBQVIiLCJmaWxlIjoib2ZmaWNlVGFibGVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgeyBQb29sIH0gPSByZXF1aXJlKCdwZycpO1xyXG5jb25zdCBkb3RlbnYgPSByZXF1aXJlKCdkb3RlbnYnKTtcclxuXHJcbmRvdGVudi5jb25maWcoKTtcclxuXHJcbmNvbnN0IHBvb2wgPSBuZXcgUG9vbCh7XHJcbiAgY29ubmVjdGlvblN0cmluZzogcHJvY2Vzcy5lbnYuREFUQUJBU0VfVVJMXHJcbn0pO1xyXG5cclxucG9vbC5vbignY29ubmVjdCcsICgpID0+IHtcclxuICBjb25zb2xlLmxvZygnZGF0YWJhc2UgaXMgY29ubmVjdGVkIG5vdycpO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGUgdXNlciBUYWJsZXNcclxuICovXHJcbmNvbnN0IGNyZWF0ZU9mZmljZVRhYmxlcyA9ICgpID0+IHtcclxuICBjb25zdCBxdWVyeVRleHQgPVxyXG4gICAgYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTXHJcbiAgICAgIG9mZmljZShcclxuICAgICAgICBpZCBVVUlEIFBSSU1BUlkgS0VZIE5PVCBOVUxMLFxyXG4gICAgICAgIG5hbWUgVkFSQ0hBUigxMjgpIE5PVCBOVUxMLFxyXG4gICAgICAgIHR5cGUgVkFSQ0hBUigxMjgpIE5PVCBOVUxMLFxyXG4gICAgICAgIGNyZWF0ZWRfZGF0ZSBUSU1FU1RBTVBcclxuICAgICAgKWA7XHJcblxyXG4gIHBvb2wucXVlcnkocXVlcnlUZXh0KVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICBwb29sLmVuZCgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERyb3AgVGFibGVzXHJcbiAqL1xyXG5jb25zdCBkcm9wT2ZmaWNlVGFibGVzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHF1ZXJ5VGV4dCA9ICdEUk9QIFRBQkxFIElGIEVYSVNUUyBvZmZpY2UnO1xyXG4gIHBvb2wucXVlcnkocXVlcnlUZXh0KVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICBwb29sLmVuZCgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxucG9vbC5vbigncmVtb3ZlJywgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdUYWJsZSByY3JlYXRpb24gZXhpdGVkJyk7XHJcbiAgcHJvY2Vzcy5leGl0KDApO1xyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNyZWF0ZU9mZmljZVRhYmxlcyxcclxuICBkcm9wT2ZmaWNlVGFibGVzXHJcbn07XHJcblxyXG5yZXF1aXJlKCdtYWtlLXJ1bm5hYmxlJyk7Il19