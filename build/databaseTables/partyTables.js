'use strict';

var _require = require('pg'),
    Pool = _require.Pool;

var dotenv = require('dotenv');

dotenv.config();

var pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

pool.on('connect', function () {
  console.log('database is connected now');
});

/**
 * Create user Tables
 */
var createPartyTables = function createPartyTables() {
  var queryText = 'CREATE TABLE IF NOT EXISTS\n      party(\n        id UUID PRIMARY KEY NOT NULL,\n        name VARCHAR(128) NOT NULL,\n        hqaddress VARCHAR(128) NOT NULL,\n        logoUrl VARCHAR(128) NOT NULL,\n        created_date TIMESTAMP\n      )';

  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

/**
 * Drop Tables
 */
var dropPartyTables = function dropPartyTables() {
  var queryText = 'DROP TABLE IF EXISTS party';
  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

pool.on('remove', function () {
  console.log('Table rcreation exited');
  process.exit(0);
});

module.exports = {
  createPartyTables: createPartyTables,
  dropPartyTables: dropPartyTables
};

require('make-runnable');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlVGFibGVzL3BhcnR5VGFibGVzLmpzIl0sIm5hbWVzIjpbInJlcXVpcmUiLCJQb29sIiwiZG90ZW52IiwiY29uZmlnIiwicG9vbCIsImNvbm5lY3Rpb25TdHJpbmciLCJwcm9jZXNzIiwiZW52IiwiREFUQUJBU0VfVVJMIiwib24iLCJjb25zb2xlIiwibG9nIiwiY3JlYXRlUGFydHlUYWJsZXMiLCJxdWVyeVRleHQiLCJxdWVyeSIsInRoZW4iLCJyZXMiLCJlbmQiLCJjYXRjaCIsImVyciIsImRyb3BQYXJ0eVRhYmxlcyIsImV4aXQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztlQUFpQkEsUUFBUSxJQUFSLEM7SUFBVEMsSSxZQUFBQSxJOztBQUNSLElBQU1DLFNBQVNGLFFBQVEsUUFBUixDQUFmOztBQUVBRSxPQUFPQyxNQUFQOztBQUVBLElBQU1DLE9BQU8sSUFBSUgsSUFBSixDQUFTO0FBQ3BCSSxvQkFBa0JDLFFBQVFDLEdBQVIsQ0FBWUM7QUFEVixDQUFULENBQWI7O0FBSUFKLEtBQUtLLEVBQUwsQ0FBUSxTQUFSLEVBQW1CLFlBQU07QUFDdkJDLFVBQVFDLEdBQVIsQ0FBWSwyQkFBWjtBQUNELENBRkQ7O0FBSUE7OztBQUdBLElBQU1DLG9CQUFvQixTQUFwQkEsaUJBQW9CLEdBQU07QUFDOUIsTUFBTUMsNlBBQU47O0FBVUFULE9BQUtVLEtBQUwsQ0FBV0QsU0FBWCxFQUNHRSxJQURILENBQ1EsVUFBQ0MsR0FBRCxFQUFTO0FBQ2JOLFlBQVFDLEdBQVIsQ0FBWUssR0FBWjtBQUNBWixTQUFLYSxHQUFMO0FBQ0QsR0FKSCxFQUtHQyxLQUxILENBS1MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2RULFlBQVFDLEdBQVIsQ0FBWVEsR0FBWjtBQUNBZixTQUFLYSxHQUFMO0FBQ0QsR0FSSDtBQVNELENBcEJEOztBQXNCQTs7O0FBR0EsSUFBTUcsa0JBQWtCLFNBQWxCQSxlQUFrQixHQUFNO0FBQzVCLE1BQU1QLFlBQVksNEJBQWxCO0FBQ0FULE9BQUtVLEtBQUwsQ0FBV0QsU0FBWCxFQUNHRSxJQURILENBQ1EsVUFBQ0MsR0FBRCxFQUFTO0FBQ2JOLFlBQVFDLEdBQVIsQ0FBWUssR0FBWjtBQUNBWixTQUFLYSxHQUFMO0FBQ0QsR0FKSCxFQUtHQyxLQUxILENBS1MsVUFBQ0MsR0FBRCxFQUFTO0FBQ2RULFlBQVFDLEdBQVIsQ0FBWVEsR0FBWjtBQUNBZixTQUFLYSxHQUFMO0FBQ0QsR0FSSDtBQVNELENBWEQ7O0FBYUFiLEtBQUtLLEVBQUwsQ0FBUSxRQUFSLEVBQWtCLFlBQU07QUFDdEJDLFVBQVFDLEdBQVIsQ0FBWSx3QkFBWjtBQUNBTCxVQUFRZSxJQUFSLENBQWEsQ0FBYjtBQUNELENBSEQ7O0FBS0FDLE9BQU9DLE9BQVAsR0FBaUI7QUFDZlgsc0NBRGU7QUFFZlE7QUFGZSxDQUFqQjs7QUFLQXBCLFFBQVEsZUFBUiIsImZpbGUiOiJwYXJ0eVRhYmxlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUG9vbCB9ID0gcmVxdWlyZSgncGcnKTtcclxuY29uc3QgZG90ZW52ID0gcmVxdWlyZSgnZG90ZW52Jyk7XHJcblxyXG5kb3RlbnYuY29uZmlnKCk7XHJcblxyXG5jb25zdCBwb29sID0gbmV3IFBvb2woe1xyXG4gIGNvbm5lY3Rpb25TdHJpbmc6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTFxyXG59KTtcclxuXHJcbnBvb2wub24oJ2Nvbm5lY3QnLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ2RhdGFiYXNlIGlzIGNvbm5lY3RlZCBub3cnKTtcclxufSk7XHJcblxyXG4vKipcclxuICogQ3JlYXRlIHVzZXIgVGFibGVzXHJcbiAqL1xyXG5jb25zdCBjcmVhdGVQYXJ0eVRhYmxlcyA9ICgpID0+IHtcclxuICBjb25zdCBxdWVyeVRleHQgPVxyXG4gICAgYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTXHJcbiAgICAgIHBhcnR5KFxyXG4gICAgICAgIGlkIFVVSUQgUFJJTUFSWSBLRVkgTk9UIE5VTEwsXHJcbiAgICAgICAgbmFtZSBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsXHJcbiAgICAgICAgaHFhZGRyZXNzIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCxcclxuICAgICAgICBsb2dvVXJsIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCxcclxuICAgICAgICBjcmVhdGVkX2RhdGUgVElNRVNUQU1QXHJcbiAgICAgIClgO1xyXG5cclxuICBwb29sLnF1ZXJ5KHF1ZXJ5VGV4dClcclxuICAgIC50aGVuKChyZXMpID0+IHtcclxuICAgICAgY29uc29sZS5sb2cocmVzKTtcclxuICAgICAgcG9vbC5lbmQoKTtcclxuICAgIH0pXHJcbiAgICAuY2F0Y2goKGVycikgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhlcnIpO1xyXG4gICAgICBwb29sLmVuZCgpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEcm9wIFRhYmxlc1xyXG4gKi9cclxuY29uc3QgZHJvcFBhcnR5VGFibGVzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHF1ZXJ5VGV4dCA9ICdEUk9QIFRBQkxFIElGIEVYSVNUUyBwYXJ0eSc7XHJcbiAgcG9vbC5xdWVyeShxdWVyeVRleHQpXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgcG9vbC5lbmQoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5wb29sLm9uKCdyZW1vdmUnLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ1RhYmxlIHJjcmVhdGlvbiBleGl0ZWQnKTtcclxuICBwcm9jZXNzLmV4aXQoMCk7XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgY3JlYXRlUGFydHlUYWJsZXMsXHJcbiAgZHJvcFBhcnR5VGFibGVzXHJcbn07XHJcblxyXG5yZXF1aXJlKCdtYWtlLXJ1bm5hYmxlJyk7Il19