'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _cors = require('cors');

var _cors2 = _interopRequireDefault(_cors);

var _officeCtr = require('./controllers/officeCtr');

var _officeCtr2 = _interopRequireDefault(_officeCtr);

var _userCtr = require('./controllers/userCtr');

var _userCtr2 = _interopRequireDefault(_userCtr);

var _partyCtr = require('./controllers/partyCtr');

var _partyCtr2 = _interopRequireDefault(_partyCtr);

var _candidatesCtr = require('./controllers/candidatesCtr');

var _candidatesCtr2 = _interopRequireDefault(_candidatesCtr);

var _votesCtr = require('./controllers/votesCtr');

var _votesCtr2 = _interopRequireDefault(_votesCtr);

var _tokenAuth = require('./helper/tokenAuth');

var _tokenAuth2 = _interopRequireDefault(_tokenAuth);

var _verifyAdmin = require('./helper/verifyAdmin');

var _verifyAdmin2 = _interopRequireDefault(_verifyAdmin);

var _userAuth = require('./helper/userAuth');

var _userAuth2 = _interopRequireDefault(_userAuth);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bodyParser = require('body-parser');

var _bodyParser2 = _interopRequireDefault(_bodyParser);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// import { json, urlencoded } from 'body-parser';
var app = (0, _express2.default)();

app.use((0, _cors2.default)());

app.use('*', function (req, res, next) {
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'PUT, GET, POST, DELETE, OPTIONS');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  next();
});

app.use(_express2.default.static(_path2.default.join(__dirname)));
app.use("/styles", _express2.default.static(__dirname + '../../UI/styles'));
app.use("/images", _express2.default.static(__dirname + '../../UI/images'));
app.use("/scripts", _express2.default.static(__dirname + '../../UI/scripts'));
app.use("/views", _express2.default.static(__dirname + '../../UI/views'));

app.use(_bodyParser2.default.json());
app.use(_bodyParser2.default.urlencoded({
  extended: true
}));

app.use(_express2.default.json());
var port = process.env.PORT || 3000;

// homepage
app.get('/', function (req, res) {
  res.sendFile(_path2.default.join(__dirname + '../../UI/views/index.html'));
});

app.get('/api/v1', function (req, res) {
  return res.status(200).send({
    "status": 200,
    "message": 'Welcome to POLITICO'
  });
});
// admin: create, edit
app.post('/api/v1/parties', _tokenAuth2.default.verifyToken, _verifyAdmin2.default.verifyIsAdmin, _partyCtr2.default.create);

app.patch('/api/v1/parties/:id/name', _tokenAuth2.default.verifyToken, _verifyAdmin2.default.verifyIsAdmin, _partyCtr2.default.update);

app.delete('/api/v1/parties/:id', _tokenAuth2.default.verifyToken, _verifyAdmin2.default.verifyIsAdmin, _partyCtr2.default.delete);

app.post('/api/v1/offices', _tokenAuth2.default.verifyToken, _verifyAdmin2.default.verifyIsAdmin, _officeCtr2.default.create);

app.post('/api/v1/office/:userid/register', _tokenAuth2.default.verifyToken, _verifyAdmin2.default.verifyIsAdmin, _userAuth2.default.validateUserId, _candidatesCtr2.default.register);

app.get('/api/v1/users', _tokenAuth2.default.verifyToken, _verifyAdmin2.default.verifyIsAdmin, _userAuth2.default.validateUserId, _userCtr2.default.getAllUsers);

// user
app.get('/api/v1/parties', _tokenAuth2.default.verifyToken, _partyCtr2.default.getParties);

app.get('/api/v1/parties/:id', _tokenAuth2.default.verifyToken, _partyCtr2.default.getAParty);

app.get('/api/v1/offices', _tokenAuth2.default.verifyToken, _officeCtr2.default.getAllOffices);

app.get('/api/v1/offices/:id', _tokenAuth2.default.verifyToken, _officeCtr2.default.getOneOffice);

app.post('/api/v1/votes', _tokenAuth2.default.verifyToken, _votesCtr2.default.votes);

app.get('/api/v1/office/:officeid/result', _tokenAuth2.default.verifyToken, _officeCtr2.default.officeResult);

app.get('/api/v1/candidates', _tokenAuth2.default.verifyToken, _candidatesCtr2.default.getAllCandidates);

// user login
app.post('/api/v1/auth/signup', _userCtr2.default.createUser);

app.post('/api/v1/auth/login', _userCtr2.default.login);

// user/admin logout
app.post('/api/v1/auth/signout', _tokenAuth2.default.verifyToken, _userCtr2.default.signout);

app.get('/', function (req, res) {
  return res.status(200).send({
    "status": 200,
    "message": 'Welcome to POLITICO'
  });
});

// Handle 404: send an 404 error page
// app.use(function(req, res) {
//   res.status(404).sendFile(path.join(__dirname + '../../UI/views/404.html'));
// });

// Handle 500: send a 500 error
// app.use(function(error, req, res, next) {
//   res.status(500).sendFile(path.join(__dirname + '../../UI/views/500.html'));
// });

app.all('*', function (req, res) {
  res.status(404).send({
    "status": 404,
    "error": "Resource not found on the server"
  });
});

app.listen(port, function () {
  console.log('app is running on port ' + port);
});

exports.default = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,