'use strict';

var _require = require('pg'),
    Pool = _require.Pool;

var dotenv = require('dotenv');

dotenv.config();

var pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

pool.on('connect', function () {
  console.log('database is connected now');
});

/**
 * Create user Tables
 */
var createUserTables = function createUserTables() {
  var queryText = 'CREATE TABLE IF NOT EXISTS\n      users(\n        id UUID PRIMARY KEY NOT NULL,\n        firstname VARCHAR(128) NOT NULL,\n        lastname VARCHAR(128) NOT NULL,\n        othername VARCHAR(128) NOT NULL,\n        email VARCHAR(128) UNIQUE NOT NULL,\n        phonenumber VARCHAR(128) NOT NULL,\n        passportUrl VARCHAR(128) NOT NULL,\n        password VARCHAR(120) NOT NULL,\n        isAdmin BOOLEAN DEFAULT false,\n        created_date TIMESTAMP\n      )';

  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

/**
 * Drop Tables
 */
var dropUserTables = function dropUserTables() {
  var queryText = 'DROP TABLE IF EXISTS users';
  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

pool.on('remove', function () {
  console.log('Table rcreation exited');
  process.exit(0);
});

module.exports = {
  createUserTables: createUserTables,
  dropUserTables: dropUserTables
};

require('make-runnable');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlVGFibGVzL3VzZXJUYWJsZXMuanMiXSwibmFtZXMiOlsiUG9vbCIsInJlcXVpcmUiLCJkb3RlbnYiLCJwb29sIiwiY29ubmVjdGlvblN0cmluZyIsInByb2Nlc3MiLCJEQVRBQkFTRV9VUkwiLCJjb25zb2xlIiwiY3JlYXRlVXNlclRhYmxlcyIsInF1ZXJ5VGV4dCIsImRyb3BVc2VyVGFibGVzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOztlQUFpQkMsUUFBQUEsSUFBQUEsQztJQUFURCxPLFNBQUFBLEk7O0FBQ1IsSUFBTUUsU0FBU0QsUUFBZixRQUFlQSxDQUFmOztBQUVBQyxPQUFBQSxNQUFBQTs7QUFFQSxJQUFNQyxPQUFPLElBQUEsSUFBQSxDQUFTO0FBQ3BCQyxvQkFBa0JDLFFBQUFBLEdBQUFBLENBQVlDO0FBRFYsQ0FBVCxDQUFiOztBQUlBSCxLQUFBQSxFQUFBQSxDQUFBQSxTQUFBQSxFQUFtQixZQUFNO0FBQ3ZCSSxVQUFBQSxHQUFBQSxDQUFBQSwyQkFBQUE7QUFERkosQ0FBQUE7O0FBSUE7OztBQUdBLElBQU1LLG1CQUFtQixTQUFuQkEsZ0JBQW1CLEdBQU07QUFDN0IsTUFBTUMsWUFBTiw2Y0FBQTs7QUFlQU4sT0FBQUEsS0FBQUEsQ0FBQUEsU0FBQUEsRUFBQUEsSUFBQUEsQ0FDUSxVQUFBLEdBQUEsRUFBUztBQUNiSSxZQUFBQSxHQUFBQSxDQUFBQSxHQUFBQTtBQUNBSixTQUFBQSxHQUFBQTtBQUhKQSxHQUFBQSxFQUFBQSxLQUFBQSxDQUtTLFVBQUEsR0FBQSxFQUFTO0FBQ2RJLFlBQUFBLEdBQUFBLENBQUFBLEdBQUFBO0FBQ0FKLFNBQUFBLEdBQUFBO0FBUEpBLEdBQUFBO0FBaEJGLENBQUE7O0FBMkJBOzs7QUFHQSxJQUFNTyxpQkFBaUIsU0FBakJBLGNBQWlCLEdBQU07QUFDM0IsTUFBTUQsWUFBTiw0QkFBQTtBQUNBTixPQUFBQSxLQUFBQSxDQUFBQSxTQUFBQSxFQUFBQSxJQUFBQSxDQUNRLFVBQUEsR0FBQSxFQUFTO0FBQ2JJLFlBQUFBLEdBQUFBLENBQUFBLEdBQUFBO0FBQ0FKLFNBQUFBLEdBQUFBO0FBSEpBLEdBQUFBLEVBQUFBLEtBQUFBLENBS1MsVUFBQSxHQUFBLEVBQVM7QUFDZEksWUFBQUEsR0FBQUEsQ0FBQUEsR0FBQUE7QUFDQUosU0FBQUEsR0FBQUE7QUFQSkEsR0FBQUE7QUFGRixDQUFBOztBQWFBQSxLQUFBQSxFQUFBQSxDQUFBQSxRQUFBQSxFQUFrQixZQUFNO0FBQ3RCSSxVQUFBQSxHQUFBQSxDQUFBQSx3QkFBQUE7QUFDQUYsVUFBQUEsSUFBQUEsQ0FBQUEsQ0FBQUE7QUFGRkYsQ0FBQUE7O0FBS0FRLE9BQUFBLE9BQUFBLEdBQWlCO0FBQ2ZILG9CQURlLGdCQUFBO0FBRWZFLGtCQUFBQTtBQUZlLENBQWpCQzs7QUFLQVYsUUFBQUEsZUFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcbmNvbnN0IGRvdGVudiA9IHJlcXVpcmUoJ2RvdGVudicpO1xyXG5cclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuY29uc3QgcG9vbCA9IG5ldyBQb29sKHtcclxuICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkxcclxufSk7XHJcblxyXG5wb29sLm9uKCdjb25uZWN0JywgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdkYXRhYmFzZSBpcyBjb25uZWN0ZWQgbm93Jyk7XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSB1c2VyIFRhYmxlc1xyXG4gKi9cclxuY29uc3QgY3JlYXRlVXNlclRhYmxlcyA9ICgpID0+IHtcclxuICBjb25zdCBxdWVyeVRleHQgPVxyXG4gICAgYENSRUFURSBUQUJMRSBJRiBOT1QgRVhJU1RTXHJcbiAgICAgIHVzZXJzKFxyXG4gICAgICAgIGlkIFVVSUQgUFJJTUFSWSBLRVkgTk9UIE5VTEwsXHJcbiAgICAgICAgZmlyc3RuYW1lIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCxcclxuICAgICAgICBsYXN0bmFtZSBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsXHJcbiAgICAgICAgb3RoZXJuYW1lIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCxcclxuICAgICAgICBlbWFpbCBWQVJDSEFSKDEyOCkgVU5JUVVFIE5PVCBOVUxMLFxyXG4gICAgICAgIHBob25lbnVtYmVyIFZBUkNIQVIoMTI4KSBOT1QgTlVMTCxcclxuICAgICAgICBwYXNzcG9ydFVybCBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsXHJcbiAgICAgICAgcGFzc3dvcmQgVkFSQ0hBUigxMjApIE5PVCBOVUxMLFxyXG4gICAgICAgIGlzQWRtaW4gQk9PTEVBTiBERUZBVUxUIGZhbHNlLFxyXG4gICAgICAgIGNyZWF0ZWRfZGF0ZSBUSU1FU1RBTVBcclxuICAgICAgKWA7XHJcblxyXG4gIHBvb2wucXVlcnkocXVlcnlUZXh0KVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICBwb29sLmVuZCgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIERyb3AgVGFibGVzXHJcbiAqL1xyXG5jb25zdCBkcm9wVXNlclRhYmxlcyA9ICgpID0+IHtcclxuICBjb25zdCBxdWVyeVRleHQgPSAnRFJPUCBUQUJMRSBJRiBFWElTVFMgdXNlcnMnO1xyXG4gIHBvb2wucXVlcnkocXVlcnlUZXh0KVxyXG4gICAgLnRoZW4oKHJlcykgPT4ge1xyXG4gICAgICBjb25zb2xlLmxvZyhyZXMpO1xyXG4gICAgICBwb29sLmVuZCgpO1xyXG4gICAgfSlcclxuICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KTtcclxufVxyXG5cclxucG9vbC5vbigncmVtb3ZlJywgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdUYWJsZSByY3JlYXRpb24gZXhpdGVkJyk7XHJcbiAgcHJvY2Vzcy5leGl0KDApO1xyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGNyZWF0ZVVzZXJUYWJsZXMsXHJcbiAgZHJvcFVzZXJUYWJsZXNcclxufTtcclxuXHJcbnJlcXVpcmUoJ21ha2UtcnVubmFibGUnKTsiXX0=