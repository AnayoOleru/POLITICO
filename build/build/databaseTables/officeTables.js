'use strict';

var _require = require('pg'),
    Pool = _require.Pool;

var dotenv = require('dotenv');

dotenv.config();

var pool = new Pool({
  connectionString: process.env.DATABASE_URL
});

pool.on('connect', function () {
  console.log('database is connected now');
});

/**
 * Create user Tables
 */
var createOfficeTables = function createOfficeTables() {
  var queryText = 'CREATE TABLE IF NOT EXISTS\n      office(\n        id UUID PRIMARY KEY NOT NULL,\n        name VARCHAR(128) NOT NULL,\n        type VARCHAR(128) NOT NULL,\n        created_date TIMESTAMP\n      )';

  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

/**
 * Drop Tables
 */
var dropOfficeTables = function dropOfficeTables() {
  var queryText = 'DROP TABLE IF EXISTS office';
  pool.query(queryText).then(function (res) {
    console.log(res);
    pool.end();
  }).catch(function (err) {
    console.log(err);
    pool.end();
  });
};

pool.on('remove', function () {
  console.log('Table rcreation exited');
  process.exit(0);
});

module.exports = {
  createOfficeTables: createOfficeTables,
  dropOfficeTables: dropOfficeTables
};

require('make-runnable');
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2RhdGFiYXNlVGFibGVzL29mZmljZVRhYmxlcy5qcyJdLCJuYW1lcyI6WyJQb29sIiwicmVxdWlyZSIsImRvdGVudiIsInBvb2wiLCJjb25uZWN0aW9uU3RyaW5nIiwicHJvY2VzcyIsIkRBVEFCQVNFX1VSTCIsImNvbnNvbGUiLCJjcmVhdGVPZmZpY2VUYWJsZXMiLCJxdWVyeVRleHQiLCJkcm9wT2ZmaWNlVGFibGVzIiwibW9kdWxlIl0sIm1hcHBpbmdzIjoiOztlQUFpQkMsUUFBQUEsSUFBQUEsQztJQUFURCxPLFNBQUFBLEk7O0FBQ1IsSUFBTUUsU0FBU0QsUUFBZixRQUFlQSxDQUFmOztBQUVBQyxPQUFBQSxNQUFBQTs7QUFFQSxJQUFNQyxPQUFPLElBQUEsSUFBQSxDQUFTO0FBQ3BCQyxvQkFBa0JDLFFBQUFBLEdBQUFBLENBQVlDO0FBRFYsQ0FBVCxDQUFiOztBQUlBSCxLQUFBQSxFQUFBQSxDQUFBQSxTQUFBQSxFQUFtQixZQUFNO0FBQ3ZCSSxVQUFBQSxHQUFBQSxDQUFBQSwyQkFBQUE7QUFERkosQ0FBQUE7O0FBSUE7OztBQUdBLElBQU1LLHFCQUFxQixTQUFyQkEsa0JBQXFCLEdBQU07QUFDL0IsTUFBTUMsWUFBTixxTUFBQTs7QUFTQU4sT0FBQUEsS0FBQUEsQ0FBQUEsU0FBQUEsRUFBQUEsSUFBQUEsQ0FDUSxVQUFBLEdBQUEsRUFBUztBQUNiSSxZQUFBQSxHQUFBQSxDQUFBQSxHQUFBQTtBQUNBSixTQUFBQSxHQUFBQTtBQUhKQSxHQUFBQSxFQUFBQSxLQUFBQSxDQUtTLFVBQUEsR0FBQSxFQUFTO0FBQ2RJLFlBQUFBLEdBQUFBLENBQUFBLEdBQUFBO0FBQ0FKLFNBQUFBLEdBQUFBO0FBUEpBLEdBQUFBO0FBVkYsQ0FBQTs7QUFxQkE7OztBQUdBLElBQU1PLG1CQUFtQixTQUFuQkEsZ0JBQW1CLEdBQU07QUFDN0IsTUFBTUQsWUFBTiw2QkFBQTtBQUNBTixPQUFBQSxLQUFBQSxDQUFBQSxTQUFBQSxFQUFBQSxJQUFBQSxDQUNRLFVBQUEsR0FBQSxFQUFTO0FBQ2JJLFlBQUFBLEdBQUFBLENBQUFBLEdBQUFBO0FBQ0FKLFNBQUFBLEdBQUFBO0FBSEpBLEdBQUFBLEVBQUFBLEtBQUFBLENBS1MsVUFBQSxHQUFBLEVBQVM7QUFDZEksWUFBQUEsR0FBQUEsQ0FBQUEsR0FBQUE7QUFDQUosU0FBQUEsR0FBQUE7QUFQSkEsR0FBQUE7QUFGRixDQUFBOztBQWFBQSxLQUFBQSxFQUFBQSxDQUFBQSxRQUFBQSxFQUFrQixZQUFNO0FBQ3RCSSxVQUFBQSxHQUFBQSxDQUFBQSx3QkFBQUE7QUFDQUYsVUFBQUEsSUFBQUEsQ0FBQUEsQ0FBQUE7QUFGRkYsQ0FBQUE7O0FBS0FRLE9BQUFBLE9BQUFBLEdBQWlCO0FBQ2ZILHNCQURlLGtCQUFBO0FBRWZFLG9CQUFBQTtBQUZlLENBQWpCQzs7QUFLQVYsUUFBQUEsZUFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IFBvb2wgfSA9IHJlcXVpcmUoJ3BnJyk7XHJcbmNvbnN0IGRvdGVudiA9IHJlcXVpcmUoJ2RvdGVudicpO1xyXG5cclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuY29uc3QgcG9vbCA9IG5ldyBQb29sKHtcclxuICBjb25uZWN0aW9uU3RyaW5nOiBwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkxcclxufSk7XHJcblxyXG5wb29sLm9uKCdjb25uZWN0JywgKCkgPT4ge1xyXG4gIGNvbnNvbGUubG9nKCdkYXRhYmFzZSBpcyBjb25uZWN0ZWQgbm93Jyk7XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSB1c2VyIFRhYmxlc1xyXG4gKi9cclxuY29uc3QgY3JlYXRlT2ZmaWNlVGFibGVzID0gKCkgPT4ge1xyXG4gIGNvbnN0IHF1ZXJ5VGV4dCA9XHJcbiAgICBgQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFNcclxuICAgICAgb2ZmaWNlKFxyXG4gICAgICAgIGlkIFVVSUQgUFJJTUFSWSBLRVkgTk9UIE5VTEwsXHJcbiAgICAgICAgbmFtZSBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsXHJcbiAgICAgICAgdHlwZSBWQVJDSEFSKDEyOCkgTk9UIE5VTEwsXHJcbiAgICAgICAgY3JlYXRlZF9kYXRlIFRJTUVTVEFNUFxyXG4gICAgICApYDtcclxuXHJcbiAgcG9vbC5xdWVyeShxdWVyeVRleHQpXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgcG9vbC5lbmQoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG4vKipcclxuICogRHJvcCBUYWJsZXNcclxuICovXHJcbmNvbnN0IGRyb3BPZmZpY2VUYWJsZXMgPSAoKSA9PiB7XHJcbiAgY29uc3QgcXVlcnlUZXh0ID0gJ0RST1AgVEFCTEUgSUYgRVhJU1RTIG9mZmljZSc7XHJcbiAgcG9vbC5xdWVyeShxdWVyeVRleHQpXHJcbiAgICAudGhlbigocmVzKSA9PiB7XHJcbiAgICAgIGNvbnNvbGUubG9nKHJlcyk7XHJcbiAgICAgIHBvb2wuZW5kKCk7XHJcbiAgICB9KVxyXG4gICAgLmNhdGNoKChlcnIpID0+IHtcclxuICAgICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgICAgcG9vbC5lbmQoKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5wb29sLm9uKCdyZW1vdmUnLCAoKSA9PiB7XHJcbiAgY29uc29sZS5sb2coJ1RhYmxlIHJjcmVhdGlvbiBleGl0ZWQnKTtcclxuICBwcm9jZXNzLmV4aXQoMCk7XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgY3JlYXRlT2ZmaWNlVGFibGVzLFxyXG4gIGRyb3BPZmZpY2VUYWJsZXNcclxufTtcclxuXHJcbnJlcXVpcmUoJ21ha2UtcnVubmFibGUnKTsiXX0=