'use strict';

var token = window.localStorage.getItem('token');
var payload = JSON.parse(window.atob(token.split('.')[1]));

function verifyToken() {
    if (!token) {
        window.location.href = '/views/sign-in.html';
    }
    // check if user is not an admin 
    if (payload.isAdmin == false) {
        window.location.href = '/views/sign-in.html';
    }
    // check if token has expired
    if (payload.exp >= payload.iat) {
        console.log("Token had expired!");
        window.location.href = '/views/401.html';
        setTimeout(function () {
            window.location.href = '/views/sign-in.html';
        }, 30000);
    }
}

var sideNav = document.getElementById("mySidenav");
var openParty = document.getElementById("openparty");
var addbtn = document.getElementById("addbtn");
var editBtn = document.getElementById("edit");
var deleteParty = document.getElementById("deleteparty");
var deleteBtn = document.getElementById("delete");
var openModal = document.getElementById("openmodal");

function openNav() {
    sideNav.style.width = "250px";
}

function closeNav() {
    sideNav.style.width = "0";
}

// add party

function openLog() {
    openModal.style.display = "block";
    editBtn.disabled = true;
    deleteBtn.disabled = true;
}

function closeLog() {
    openModal.style.display = "none";
    editBtn.disabled = false;
    deleteBtn.disabled = false;
}

// delete party
// deleteBtn.addEventListener("click", openDelete)
function openDelete() {
    deleteParty.style.display = "block";
    addbtn.disabled = true;
    editBtn.disabled = true;
}

function closeDelete() {
    deleteParty.style.display = "none";
    addbtn.disabled = false;
    editBtn.disabled = false;
}

// consuming API
// admin can create party
document.getElementById('addParty').addEventListener('submit', addParty);

function addParty(e) {
    e.preventDefault();

    var name = document.getElementById('name').value;
    var hqaddress = document.getElementById('hqaddress').value;
    var logoUrl = document.getElementById('logoURL').value;
    var result = document.getElementById('result');
    var responseStatus = false;

    fetch('https://trustpolitico.herokuapp.com/api/v1/parties', {
        method: 'POST',
        headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-type': 'application/json',
            'x-access-token': token
        },
        body: JSON.stringify({
            name: name,
            hqaddress: hqaddress,
            logoUrl: logoUrl
        })

    }).then(function (res) {
        if (res.ok) {
            responseStatus = true;
            result.innerHTML = "party successfully created";
            result.style.color = "white";
        }
        return res.json();
    })
    // render the parties page
    .then(function (res) {
        console.log(res);
        if (!responseStatus) {
            result.innerHTML = res.error;
            result.style.color = "White";
        }
        if (res.data[0].user.isadmin == true) {
            window.location.href = '/views/signin.html';
        }
    });
};

function getParties() {
    fetch('https://trustpolitico.herokuapp.com/api/v1/parties', {
        method: 'GET',
        headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-type': 'application/json',
            'x-access-token': token
        }
    }).then(function (res) {
        return res.json();
    }).then(function (data) {
        console.log(data);
        var result = '';
        data.data.forEach(function (party) {
            result += '<div class="col-1-of-3">\n                <div class="card">\n                    <div class="card__side card__side--front">\n                        <div class="card__picture card__picture--1" id="partyImage">&nbsp;</div>\n                        <div class="card__details">\n                            <ul>\n                                <li style="font-size: 30px" class="partyId" id=' + party.id + '>' + party.name + '</li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class="card__side card__side--back card__side--back-1">\n                        <div class="card__cta">\n                            <div class="card__price-box">\n                                <p class="card__price-only">Headquater Address</p>\n                                <p class="card__price-only" id="partyAddress">' + party.hqaddress + '</p>\n                            </div>\n                            <a href="#" class="btn" id="edit" onclick="openEdit(\'' + party.id + '\')">Edit</a>\n                            <a href="#" class="btn" id="delete" onclick="openDelete()">Delete</a>\n                        </div>\n                    </div>\n                </div>\n            </div> ';

            username = '<li><a href="#" class="active">' + payload.userName + ' ' + payload.lastName + '</a></li>';

            nameside = '<span>' + payload.userName + ' ' + payload.lastName + '</span>';
        });
        document.getElementById('partyResult').innerHTML = result;
        document.getElementById('username').innerHTML = username;
        document.getElementById('nameside').innerHTML = nameside;
    });
}

getParties();

function openEdit(party) {
    openParty.style.display = "block";
    openParty.dataset.partyId = party;
    addbtn.disabled = true;
}

function closeEdit() {
    openParty.style.display = "none";
    deleteBtn.disabled = false;
    addbtn.disabled = false;
}
var responseStatus = false;
var result = document.getElementById('result');

function editSubmit() {
    var Id = openParty.dataset.partyId;
    var name = document.getElementById('editvalue').value;

    fetch('https://trustpolitico.herokuapp.com/api/v1/parties/' + Id + '/name', {
        method: 'PATCH',
        headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-type': 'application/json',
            'x-access-token': token
        },
        body: JSON.stringify({
            name: name
        })

    }).then(function (res) {
        if (res.ok) {
            responseStatus = true;
            delResult.innerHTML = "Candidate name had changed";
            delResult.style.color = "white";
            closeEdit();
        }
        return res.json();
    })
    // render the parties page
    .then(function (res) {
        console.log(res);
        if (!responseStatus) {
            delResult.innerHTML = res.error;
            delResult.style.color = "red";
        }
        if (payload.isadmin == false) {
            window.location.href = '/views/signin.html';
        }
    });
}

// delete party
var delResult = document.getElementById('delResult');

function deleteGo() {
    var Id = openParty.dataset.partyId;

    fetch('https://trustpolitico.herokuapp.com/api/v1/parties/' + Id, {
        method: 'DELETE',
        headers: {
            'Accept': 'application/json, text/plain, */*',
            'Content-type': 'application/json',
            'x-access-token': token
        }
    }).then(function (res) {
        if (res.ok) {
            responseStatus = true;
            result.innerHTML = "Candidate name had changed";
            result.style.color = "green";
            closeEdit();
        }
        console.log(res);
        return res.json();
    })
    // render the parties page
    .then(function (res) {
        console.log(res);
        if (!responseStatus) {
            result.innerHTML = res.error;
            result.style.color = "red";
        }
        if (payload.isadmin == false) {
            window.location.href = '/views/signin.html';
        }
    });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,