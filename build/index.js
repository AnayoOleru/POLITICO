'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _bodyParser = require('body-parser');

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _partyCtr = require('./src/controllers/partyCtr');

var _partyCtr2 = _interopRequireDefault(_partyCtr);

var _officeCtr = require('./src/controllers/officeCtr');

var _officeCtr2 = _interopRequireDefault(_officeCtr);

var _tokenAuth = require('./helper/tokenAuth');

var _tokenAuth2 = _interopRequireDefault(_tokenAuth);

var _userCtr = require('./src/controllers/userCtr');

var _userCtr2 = _interopRequireDefault(_userCtr);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var app = (0, _express2.default)();
app.use((0, _bodyParser.json)());
app.use((0, _bodyParser.urlencoded)({
  extended: true
}));

app.use(_express2.default.json());
var port = process.env.PORT || 3000;

app.get('/api/v1', function (req, res) {
  return res.status(200).send({
    "status": 200,
    "message": 'Welcome to POLITICO'
  });
});
app.post('/api/v1/parties', _partyCtr2.default.createParty);
app.get('/api/v1/parties/:partyId', _partyCtr2.default.getPartyById);
app.get('/api/v1/parties', _partyCtr2.default.getParties);
app.put('/api/v1/party/:id/name', _partyCtr2.default.update);
app.delete('/api/v1/party/:id', _partyCtr2.default.delete);
app.post('/api/v1/office', _officeCtr2.default.createOffice);
app.get('/api/v1/office', _officeCtr2.default.getOffice);
app.get('/api/v1/office/:officeId', _officeCtr2.default.getOfficeById);
app.post('/api/v1/auth/signup', _userCtr2.default.createUser);
app.get('/', function (req, res) {
  return res.status(404).send({
    "status": 404,
    "message": "Page not found, your URL is incorrect"
  });
});

// app.listen(3000)
// console.log('app running on port ', 3000);
app.listen(port, function () {
  console.log('app is running on port ' + port);
});

exports.default = app;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sIm5hbWVzIjpbImFwcCIsInVzZSIsImV4dGVuZGVkIiwiZXhwcmVzcyIsImpzb24iLCJwb3J0IiwicHJvY2VzcyIsImVudiIsIlBPUlQiLCJnZXQiLCJyZXEiLCJyZXMiLCJzdGF0dXMiLCJzZW5kIiwicG9zdCIsIlBhcnR5IiwiY3JlYXRlUGFydHkiLCJnZXRQYXJ0eUJ5SWQiLCJnZXRQYXJ0aWVzIiwicHV0IiwidXBkYXRlIiwiZGVsZXRlIiwiT2ZmaWNlIiwiY3JlYXRlT2ZmaWNlIiwiZ2V0T2ZmaWNlIiwiZ2V0T2ZmaWNlQnlJZCIsInVzZXJDdHIiLCJjcmVhdGVVc2VyIiwibGlzdGVuIiwiY29uc29sZSIsImxvZyJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7O0FBR0EsSUFBTUEsTUFBTSx3QkFBWjtBQUNBQSxJQUFJQyxHQUFKLENBQVEsdUJBQVI7QUFDQUQsSUFBSUMsR0FBSixDQUFRLDRCQUFXO0FBQ2pCQyxZQUFVO0FBRE8sQ0FBWCxDQUFSOztBQUlBRixJQUFJQyxHQUFKLENBQVFFLGtCQUFRQyxJQUFSLEVBQVI7QUFDQSxJQUFNQyxPQUFPQyxRQUFRQyxHQUFSLENBQVlDLElBQVosSUFBb0IsSUFBakM7O0FBR0FSLElBQUlTLEdBQUosQ0FBUSxTQUFSLEVBQW1CLFVBQUNDLEdBQUQsRUFBTUMsR0FBTjtBQUFBLFNBQWNBLElBQUlDLE1BQUosQ0FBVyxHQUFYLEVBQWdCQyxJQUFoQixDQUFxQjtBQUNwRCxjQUFVLEdBRDBDO0FBRXBELGVBQVc7QUFGeUMsR0FBckIsQ0FBZDtBQUFBLENBQW5CO0FBSUFiLElBQUljLElBQUosQ0FBUyxpQkFBVCxFQUE0QkMsbUJBQU1DLFdBQWxDO0FBQ0FoQixJQUFJUyxHQUFKLENBQVEsMEJBQVIsRUFBb0NNLG1CQUFNRSxZQUExQztBQUNBakIsSUFBSVMsR0FBSixDQUFRLGlCQUFSLEVBQTJCTSxtQkFBTUcsVUFBakM7QUFDQWxCLElBQUltQixHQUFKLENBQVEsd0JBQVIsRUFBa0NKLG1CQUFNSyxNQUF4QztBQUNBcEIsSUFBSXFCLE1BQUosQ0FBVyxtQkFBWCxFQUFnQ04sbUJBQU1NLE1BQXRDO0FBQ0FyQixJQUFJYyxJQUFKLENBQVMsZ0JBQVQsRUFBMkJRLG9CQUFPQyxZQUFsQztBQUNBdkIsSUFBSVMsR0FBSixDQUFRLGdCQUFSLEVBQTBCYSxvQkFBT0UsU0FBakM7QUFDQXhCLElBQUlTLEdBQUosQ0FBUSwwQkFBUixFQUFvQ2Esb0JBQU9HLGFBQTNDO0FBQ0F6QixJQUFJYyxJQUFKLENBQVMscUJBQVQsRUFBZ0NZLGtCQUFRQyxVQUF4QztBQUNBM0IsSUFBSVMsR0FBSixDQUFRLEdBQVIsRUFBYSxVQUFDQyxHQUFELEVBQU1DLEdBQU47QUFBQSxTQUFjQSxJQUFJQyxNQUFKLENBQVcsR0FBWCxFQUFnQkMsSUFBaEIsQ0FBcUI7QUFDOUMsY0FBVSxHQURvQztBQUU5QyxlQUFXO0FBRm1DLEdBQXJCLENBQWQ7QUFBQSxDQUFiOztBQUtBO0FBQ0E7QUFDQWIsSUFBSTRCLE1BQUosQ0FBV3ZCLElBQVgsRUFBaUIsWUFBTTtBQUNyQndCLFVBQVFDLEdBQVIsNkJBQXNDekIsSUFBdEM7QUFDRCxDQUZEOztrQkFJZUwsRyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGpzb24sIHVybGVuY29kZWQgfSBmcm9tICdib2R5LXBhcnNlcic7XHJcbmltcG9ydCBleHByZXNzIGZyb20gJ2V4cHJlc3MnO1xyXG5pbXBvcnQgUGFydHkgZnJvbSAnLi9zcmMvY29udHJvbGxlcnMvcGFydHlDdHInO1xyXG5pbXBvcnQgT2ZmaWNlIGZyb20gJy4vc3JjL2NvbnRyb2xsZXJzL29mZmljZUN0cic7XHJcbmltcG9ydCBUb2tlbkF1dGggZnJvbSAnLi9oZWxwZXIvdG9rZW5BdXRoJztcclxuaW1wb3J0IHVzZXJDdHIgZnJvbSAnLi9zcmMvY29udHJvbGxlcnMvdXNlckN0cic7XHJcblxyXG5cclxuY29uc3QgYXBwID0gZXhwcmVzcygpO1xyXG5hcHAudXNlKGpzb24oKSk7XHJcbmFwcC51c2UodXJsZW5jb2RlZCh7XHJcbiAgZXh0ZW5kZWQ6IHRydWVcclxufSkpO1xyXG5cclxuYXBwLnVzZShleHByZXNzLmpzb24oKSlcclxuY29uc3QgcG9ydCA9IHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMDtcclxuXHJcblxyXG5hcHAuZ2V0KCcvYXBpL3YxJywgKHJlcSwgcmVzKSA9PiByZXMuc3RhdHVzKDIwMCkuc2VuZCh7XHJcbiAgXCJzdGF0dXNcIjogMjAwLFxyXG4gIFwibWVzc2FnZVwiOiAnV2VsY29tZSB0byBQT0xJVElDTydcclxufSkpO1xyXG5hcHAucG9zdCgnL2FwaS92MS9wYXJ0aWVzJywgUGFydHkuY3JlYXRlUGFydHkpO1xyXG5hcHAuZ2V0KCcvYXBpL3YxL3BhcnRpZXMvOnBhcnR5SWQnLCBQYXJ0eS5nZXRQYXJ0eUJ5SWQpO1xyXG5hcHAuZ2V0KCcvYXBpL3YxL3BhcnRpZXMnLCBQYXJ0eS5nZXRQYXJ0aWVzKTtcclxuYXBwLnB1dCgnL2FwaS92MS9wYXJ0eS86aWQvbmFtZScsIFBhcnR5LnVwZGF0ZSk7XHJcbmFwcC5kZWxldGUoJy9hcGkvdjEvcGFydHkvOmlkJywgUGFydHkuZGVsZXRlKTtcclxuYXBwLnBvc3QoJy9hcGkvdjEvb2ZmaWNlJywgT2ZmaWNlLmNyZWF0ZU9mZmljZSk7XHJcbmFwcC5nZXQoJy9hcGkvdjEvb2ZmaWNlJywgT2ZmaWNlLmdldE9mZmljZSk7XHJcbmFwcC5nZXQoJy9hcGkvdjEvb2ZmaWNlLzpvZmZpY2VJZCcsIE9mZmljZS5nZXRPZmZpY2VCeUlkKTtcclxuYXBwLnBvc3QoJy9hcGkvdjEvYXV0aC9zaWdudXAnLCB1c2VyQ3RyLmNyZWF0ZVVzZXIpO1xyXG5hcHAuZ2V0KCcvJywgKHJlcSwgcmVzKSA9PiByZXMuc3RhdHVzKDQwNCkuc2VuZCh7XHJcbiAgXCJzdGF0dXNcIjogNDA0LFxyXG4gIFwibWVzc2FnZVwiOiBcIlBhZ2Ugbm90IGZvdW5kLCB5b3VyIFVSTCBpcyBpbmNvcnJlY3RcIlxyXG59KSk7XHJcblxyXG4vLyBhcHAubGlzdGVuKDMwMDApXHJcbi8vIGNvbnNvbGUubG9nKCdhcHAgcnVubmluZyBvbiBwb3J0ICcsIDMwMDApO1xyXG5hcHAubGlzdGVuKHBvcnQsICgpID0+IHtcclxuICBjb25zb2xlLmxvZyhgYXBwIGlzIHJ1bm5pbmcgb24gcG9ydCAke3BvcnR9YCk7XHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXBwOyJdfQ==